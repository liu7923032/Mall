using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Abp.Application.Services;
using Abp.Application.Services.Dto;
using Abp.Authorization;
using Abp.AutoMapper;
using Abp.Domain.Repositories;
using Abp.Linq.Extensions;
using Abp.UI;
using Mall.Domain.Entities;

namespace Mall.Integral
{
    #region 1.0 接口抽象
    public interface IIntegralAppService : IApplicationService
    {
        PagedResultDto<IntegralDto> GetAll(GetIntegralsInput input);
        Task<IntegralDto> Create(CreateIntegralInput input);
    }
    #endregion


    #region 2.0 具体实现
    public class IntegralAppService : MallAppServiceBase, IIntegralAppService
    {

        private IRepository<Mall_Account, long> _accountRepository;
        private IRepository<Mall_Integral> _integralRepository;

        public IntegralAppService(IRepository<Mall_Integral> integralRepository, IRepository<Mall_Account, long> accountRepository)
        {
            this._accountRepository = accountRepository;
            this._integralRepository = integralRepository;
        }

        /// <summary>
        /// 对userId进行加密
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        public async Task<IntegralDto> Create(CreateIntegralInput input)
        {
            if (input.ValidationCode != MallConsts.SecurityCode)
            {
                throw new UserFriendlyException("请不要捣乱了");
            }
            //找到用户的Id
            var user = await _accountRepository.GetAsync(input.UserId);
            //设置积分
            input.Current = user.Integral.Value;
            //更新该人员的主要积分信息
            if (input.CostType == CostType.Earn)
            {
                user.Integral += input.Integral;
            }
            else
            {
                user.Integral -= input.Integral;
            }
            var result = await _integralRepository.InsertAsync(input.MapTo<Mall_Integral>());
            return result.MapTo<IntegralDto>();
        }

        public PagedResultDto<IntegralDto> GetAll(GetIntegralsInput input)
        {
            var query = _integralRepository.GetAll().Where(u => u.UserId.Equals(UserId));

            var pageData = query.OrderByDescending(u => u.CreationTime).Skip(input.SkipCount).Take(input.MaxResultCount);


            return new PagedResultDto<IntegralDto>() { Items = pageData.ToList().MapTo<List<IntegralDto>>(), TotalCount = query.Count() };
        }
    }
    #endregion

}
