using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Abp.Application.Services;
using Abp.Application.Services.Dto;
using Abp.Authorization;
using Abp.AutoMapper;
using Abp.Domain.Repositories;
using Abp.Linq.Extensions;
using Abp.Runtime.Caching;
using Abp.Runtime.Session;
using Mall.Authorization;
using Mall.Cache;
using Mall.Domain.Entities;

namespace Mall.Category
{

    public interface ICategoryAppService : IAsyncCrudAppService<CategoryDto, int, GetAllCategoryInput, CreateCategoryInput, UpdateCategoryInput>
    {
        Task<List<CategoryDto>> GetAllListAsync();
    }

   
    public class CategoryAppService : AsyncCrudAppService<Mall_Category, CategoryDto, int, GetAllCategoryInput, CreateCategoryInput, UpdateCategoryInput>, ICategoryAppService
    {
        private ICategoryCache _categoryCache;
        private IRepository<Mall_Category> _categoryRepository;
        public CategoryAppService(IRepository<Mall_Category> categoryRepository, ICategoryCache categoryCache) : base(categoryRepository)
        {
            _categoryRepository = categoryRepository;
            _categoryCache = categoryCache;
        }

        protected override IQueryable<Mall_Category> CreateFilteredQuery(GetAllCategoryInput input)
        {
            return base.CreateFilteredQuery(input)
                .WhereIf(!string.IsNullOrEmpty(input.Name), u => u.Name.Contains(input.Name));
        }

        /// <summary>
        /// 重载新建物料
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        [AbpAuthorize(PermissionNames.Page_Admin)]
        public async override Task<CategoryDto> Create(CreateCategoryInput input)
        {
            //自动生成类别编号
            var categoryNum = await _categoryRepository.CountAsync();

            input.CategoryNo = (categoryNum + 1).ToString().PadLeft(2, '0');

            return await base.Create(input);
        }
        [AbpAuthorize(PermissionNames.Page_Admin)]
        public override Task<CategoryDto> Update(UpdateCategoryInput input)
        {
            return base.Update(input);
        }

        [AbpAuthorize(PermissionNames.Page_Admin)]
        public override Task Delete(EntityDto<int> input)
        {
            return base.Delete(input);
        }


        public async Task<List<CategoryDto>> GetAllListAsync()
        {
            return await _categoryCache.GetCategories();
        }
    }
}
