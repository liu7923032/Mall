using System;
using Abp.AspNetCore;
using Abp.Castle.Logging.Log4Net;
using Abp.EntityFrameworkCore;
using Mall.EntityFrameworkCore;
using Castle.Facilities.Logging;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Swashbuckle.AspNetCore.Swagger;
using Microsoft.AspNetCore.Authentication.Cookies;

namespace Mall.Web.Startup
{
    public class Startup
    {
        public static string CookieScheme = "AppAuthenticationScheme";

        public IServiceProvider ConfigureServices(IServiceCollection services)
        {
            //Configure DbContext
            services.AddAbpDbContext<MallDbContext>(options =>
            {
                DbContextOptionsConfigurer.Configure(options.DbContextOptions, options.ConnectionString);
            });

            services.AddAuthentication(authOpts =>
            {
                //authOpts.DefaultAuthenticateScheme = CookieAuthenticationDefaults.AuthenticationScheme;
                //authOpts.DefaultSignInScheme = CookieAuthenticationDefaults.AuthenticationScheme;
                authOpts.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;
            }).AddCookie(cookieOpts =>
            {
                cookieOpts.LoginPath = "/Account/Login/";
            });

            ////添加授权认证
            //services.AddAuthentication(CookieScheme)
            //    .AddCookie(CookieScheme, options =>
            //    {

            //        //如果用户访问受限制的资源而没有授权的时候,直接跳转到
            //        options.AccessDeniedPath = "/Account/Forbidden/";
            //        //如果未登陆,那么返回到登陆界面
            //        options.LoginPath = "/Account/Login";
            //        //设置Cookie的名称
            //        //options.Cookie.Name = "Abp.Mall.Cooike";

            //        //options.Cookie.Domain = "e.mdsd.cn";
            //        //options.Cookie.Path = "/";
            //    });

            services.AddMvc(options =>
            {
                //添加防伪过滤器
                options.Filters.Add(new AutoValidateAntiforgeryTokenAttribute());
            });



            //添加swagger
            services.AddSwaggerGen(options =>
            {
                options.SwaggerDoc("v1", new Info { Title = "AbpZeroTemplate API", Version = "v1" });
                options.DocInclusionPredicate((docName, description) => true);
            });

            //Configure Abp and Dependency Injection
            return services.AddAbp<MallWebModule>(options =>
            {
                //Configure Log4Net logging
                options.IocManager.IocContainer.AddFacility<LoggingFacility>(
                    f => f.UseAbpLog4Net().WithConfig("log4net.config")
                );
            });
        }

        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
        {
            app.UseAbp(); //Initializes ABP framework.

            app.UseSwagger();
            //Enable middleware to serve swagger - ui assets(HTML, JS, CSS etc.)
            app.UseSwaggerUI(options =>
            {
                options.SwaggerEndpoint("/swagger/v1/swagger.json", "AbpZeroTemplate API V1");
            });




            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
                app.UseDatabaseErrorPage();
            }
            else
            {
                app.UseExceptionHandler("/Error");
            }

            app.UseStaticFiles();

            app.UseAuthentication();

            app.UseMvc(routes =>
            {
                routes.MapRoute(
                    name: "default",
                    template: "{controller=Home}/{action=Index}/{id?}");
            });
        }
    }
}
