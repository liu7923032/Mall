using System.Threading.Tasks;
using Mall.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authorization;
using Abp.Web.Models;
using Mall.LoginApp;
using Microsoft.AspNetCore.Authentication.Cookies;
using Abp;
using Microsoft.Extensions.Configuration;
using Microsoft.AspNetCore.Hosting;
using Mall.Configuration;
using Mall.Integral;

namespace Mall.Web.Controllers
{
    public class AccountController : MallControllerBase
    {
        private IUserManager _loginManager;

        private static readonly string CookieScheme = CookieAuthenticationDefaults.AuthenticationScheme;

        private readonly IConfigurationRoot _appConfiguration;
        private IIntegralAppService _integralService;

        public AccountController(IUserManager loginManager, IIntegralAppService integralAppService, IHostingEnvironment env)
        {
            _loginManager = loginManager;
            _appConfiguration = AppConfigurations.Get(env.ContentRootPath, env.EnvironmentName);
            _integralService = integralAppService;
        }

        [AllowAnonymous]
        public async Task<ActionResult> Login()
        {
            string gongHao = Request.Query["gongHao"];
            string returnUrl = Request.Query["returnUrl"];


            string authServer = _appConfiguration.GetSection("Authorzation:Server").Value;
            if (string.IsNullOrEmpty(gongHao))
            {

                return Redirect($"{authServer}?returnUrl={Request.Scheme}://{Request.Host}{Request.Path}");
            }
            else
            {
                //授权地址
                var authen = _appConfiguration.GetSection("Authorzation:Authentication").Value;
                //异步加载获取远程服务
                var loginModel = new LoginModel()
                {
                    Account = gongHao,
                    Password = "111",
                    IsRemember = false
                };
                await LoginAysnc(loginModel);
                return Redirect("/Home/Index");
            }
        }

        private async Task LoginAysnc(LoginModel login)
        {
            var user = await _loginManager.SignAsync(login);
            //证件当事人
            var claimPrincipal = await _loginManager.GetPrincipalAsync(user, CookieScheme);

            await HttpContext.SignOutAsync(CookieScheme);
            //系统登陆
            await HttpContext.SignInAsync(CookieScheme, claimPrincipal, new AuthenticationProperties() { IsPersistent = login.IsRemember });

        }



        [AllowAnonymous]
        [HttpPost]
        public async Task<JsonResult> LoginAsync([FromBody]LoginModel login)
        {
            if (!ModelState.IsValid)
            {
                throw new AbpException("");
            }
            await LoginAysnc(login);
            //跳转地址
            //return RedirectToAction("Index", "Home");
            return Json(new AjaxResponse() { TargetUrl = "/Home/Index" });
        }

        public async Task<ActionResult> SignOut()
        {
            await HttpContext.SignOutAsync(CookieScheme);
            return RedirectToAction("Login");
        }

        /// <summary>
        /// 通过其他方式登陆
        /// </summary>
        /// <returns></returns>
        [AllowAnonymous]
        public async Task<ActionResult> ExternalLogin()
        {
            string account = Request.Query["gongHao"];
            //如果账号不存在,那么直接跳转到登陆页面
            if (string.IsNullOrEmpty(account))
            {
                return Redirect("/Account/Login");
            }
            //var loginUser = Request.Cookies["MDSD.LoginUser"];
            //获取当前信息
            var user = await _loginManager.GetUserByAccountAsync(account);
            //获取证件当事人
            var claimPrincipal = await _loginManager.GetPrincipalAsync(user, CookieScheme);
            //登陆系统
            await HttpContext.SignInAsync(CookieScheme, claimPrincipal, new AuthenticationProperties() { IsPersistent = false });
            //跳转地址
            return Redirect("/Home/Index");
        }

        /// <summary>
        /// 为了保持网站能够持续响应
        /// </summary>
        /// <returns></returns>
        [AllowAnonymous]
        public async Task<AjaxResponse> ToResponse()
        {
            return await Task.FromResult(new AjaxResponse() { Result = "成功响应" });
        }

        /// <summary>
        /// 用于同步积分
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        [DontWrapResult]
        [HttpPost]
        [AllowAnonymous]
        public async Task<IntegralDto> SyncIntegral(CreateIntegralInput input)
        {
            return await _integralService.Create(input);
        }

    }
}