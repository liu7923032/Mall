using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Abp.Application.Services.Dto;
using Abp.AutoMapper;
using Abp.Domain.Repositories;
using Abp.Linq.Extensions;
using Abp.Notifications;
using Abp.Runtime.Session;
using Mall.Domain.Entities;
using Microsoft.EntityFrameworkCore;

namespace Mall.Order
{
    #region 1.0 接口 IOrderAppService
    public interface IOrderAppService
    {
        /// <summary>
        /// 获取订单信息
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        Task<PagedResultDto<OrderDto>> GetMyOrders(GetAllOrderInput input);
        /// <summary>
        /// 确认订单
        /// </summary>
        /// <returns></returns>
        Task AcceptOrder(int orderId);

        Task<int> GetMyOrderCount(OrderStatus orderStatus);

        Task<int> GetOrderCount(OrderStatus orderStatus);

    }
    #endregion

    #region 2.0 实现 OrderAppService
    /// <summary>
    /// 订单处理类
    /// </summary>
    public class OrderAppService : MallAppServiceBase, IOrderAppService
    {
        private IRepository<Mall_Order> _orderRepository;
        private IRepository<Mall_Account> _accountRepository;
        private IRepository<Mall_Integral> _integralRepository;
        private IRepository<Mall_Product> _productService;
        private IRepository<Mall_CartItem> _cartItemRepository;
        private INotificationPublisher _notificationPublisher;

        public OrderAppService(IRepository<Mall_Order> orderRepository,
            IRepository<Mall_Account> accountRepository,
            IRepository<Mall_Integral> integralRepository,
            INotificationPublisher notificationPublisher,
            IRepository<Mall_Product> productRepository, IRepository<Mall_CartItem> cartItemRepository)
        {
            this._accountRepository = accountRepository;
            this._orderRepository = orderRepository;
            this._integralRepository = integralRepository;
            this._notificationPublisher = notificationPublisher;
            this._productService = productRepository;
            this._cartItemRepository = cartItemRepository;
        }

        /// <summary>
        /// 通过状态获取订单
        /// </summary>
        /// <param name="orderStatus"></param>
        /// <returns></returns>
        private IQueryable<Mall_Order> GetOrders(OrderStatus orderStatus)
        {
            return _orderRepository.GetAll().Where(u => u.OrderStatus.Equals(orderStatus));
        }


        /// <summary>
        /// 获取订单信息
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        public async Task<PagedResultDto<OrderDto>> GetMyOrders(GetAllOrderInput input)
        {

            var orders = GetOrders(input.OrderStatus);
            //获取我的订单
            if (input.OrderType == OrderType.Me)
            {
                orders = orders.Where(u => u.CreatorUserId.Value.Equals(UserId));
            }
            var data = from a in orders
                       join b in _accountRepository.GetAll()
                       on a.CreatorUserId.Value equals b.Id
                       join c in _accountRepository.GetAll()
                       on a.LastModifierUserId.Value equals c.Id into leftJoin
                       from c in leftJoin.DefaultIfEmpty()
                       select new OrderDto
                       {
                           Id = a.Id,
                           OrderNo = a.OrderNo,
                           OrderStatus = a.OrderStatus,
                           CreationTime = a.CreationTime,
                           CreatorName = b.Account,
                           AllPrice = a.AllPrice,
                           CartId = a.CartId,
                           ApproveTime = a.LastModificationTime,
                           ApproveUName = c == null ? "" : c.Account
                       };
            //2:获取对数据进行排序和分页处理
            data = data.OrderByDescending(u => u.CreationTime).Skip(input.SkipCount).Take(input.MaxResultCount);

            return await Task.FromResult(new PagedResultDto<OrderDto>() { TotalCount = data.Count(), Items = data.ToList() });
        }


        public async Task<int> GetMyOrderCount(OrderStatus orderStatus)
        {
            return await GetOrders(orderStatus).Where(u => u.CreatorUserId.Value.Equals(UserId)).CountAsync();


        }
        public async Task<int> GetOrderCount(OrderStatus orderStatus)
        {
            return await GetOrders(orderStatus).CountAsync();
        }

        /// <summary>
        /// 接受订单
        /// </summary>
        /// <param name="orderId"></param>
        /// <returns></returns>
        public async Task AcceptOrder(int orderId)
        {
            //1.找到订单
            var order = await _orderRepository.FirstOrDefaultAsync(u => u.Id.Equals(orderId));
            //2.更新订单状态
            order.OrderStatus = OrderStatus.Complete;
            await _orderRepository.UpdateAsync(order);
            //3.添加积分消费记录
            Mall_Integral mall_Integral = new Mall_Integral()
            {
                CostType = CostType.Cost,
                Integral = order.AllPrice,
                IntergralDesc = $"来源订单:{order.OrderNo}",
                UserId = UserId,
            };
            await _integralRepository.InsertAsync(mall_Integral);
            //4.更新人员当前积分
            var curUser = await _accountRepository.GetAsync(UserId);
            if (curUser.Integral == null)
            {
                curUser.Integral = -order.AllPrice;
            }
            else
            {
                curUser.Integral -= order.AllPrice;
            }
            await _accountRepository.UpdateAsync(curUser);
            //5:向产品中更新数量
            var products = _cartItemRepository.GetAll().Where(u => u.CartId.Equals(order.CartId)).ToList();
            products.ForEach(u =>
            {
                var product = _productService.FirstOrDefault(u.ProductId);
                product.SaleNums += u.ItemNum;
            });

            //6.给用户发送通知
            _notificationPublisher.Publish("订单审批完成通知", new MessageNotificationData("订单申请已审批通过"), null, NotificationSeverity.Info, new[] { AbpSession.ToUserIdentifier() });

        }

    }
    #endregion

}
